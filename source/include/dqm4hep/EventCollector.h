/*
 *
 * DQMEventCollector.h header template automatically generated by a class generator
 * Creation date : mer. sept. 9 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_EVENTCOLLECTOR_H
#define DQM4HEP_EVENTCOLLECTOR_H

// -- dqm4hep headers
#include "dqm4hep/Internal.h"
#include "dqm4hep/StatusCodes.h"
#include "dqm4hep/Application.h"

// -- tclap headers
#include "tclap/CmdLine.h"
#include "tclap/Arg.h"

namespace dqm4hep {

  namespace online {
    
    /** 
     *  @brief  EventCollector class
     */
    class EventCollector : public Application
    {
    public:
      /**
       *  @brief  Default constructor
       */
      EventCollector();
      
      /**
       *  @brief  Default destructor
       */
      ~EventCollector() = default;
      
      void parseCmdLine(int argc, char **argv) override;
      void onInit() override;
      void onEvent(AppEvent *pAppEvent) override;
      void onStart() override;
      void onStop() override;

    private:
      void handleRegistration(const net::Buffer &request, net::Buffer &response);
      void handleClientExit(ClientExitEvent *event);
      void handleCollectEvent(const net::Buffer &buffer);
      void handleClientUnregistration(const net::Buffer &buffer);
      void handleEventRequest(const net::Buffer &request, net::Buffer &response);
      void sendStatsTimer10();
      void sendStatsTimer60();
      void printSourceMap();
      
      /**
       *  @brief  SourceInfo struct
       */
      struct SourceInfo {
        SourceInfo() = default;
        SourceInfo(SourceInfo&& info);
        
        int                  m_clientId = {0};
        std::string          m_name = {""};
        std::string          m_streamerName = {""};
        core::StringVector   m_collectors = {};
        core::StringMap      m_hostInfo = {};
        net::Buffer          m_buffer = {};
        net::Service        *m_eventService = {nullptr};
      };
      
      typedef std::map<std::string, SourceInfo> SourceInfoMap;
      
      std::shared_ptr<TCLAP::CmdLine>     m_cmdLine = nullptr;
      SourceInfoMap                       m_sourceInfoMap = {};
      core::TimePoint                     m_lastStatCall10 = {};
      core::TimePoint                     m_lastStatCall60 = {};
      unsigned int                        m_nCollectedEvents10 = {0};
      unsigned int                        m_nCollectedEvents60 = {0};
      unsigned int                        m_nCollectedBytes10 = {0};
      unsigned int                        m_nCollectedBytes60 = {0};
    };

  }

} 

#endif  //  DQM4HEP_EVENTCOLLECTOR_H
